datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tenant {
  businessType        String?
  contactLogs         ContactLog[]
  contactNumber       String?
  contactPerson       String?
  createdAt           DateTime             @default(now())
  email               String?
  id                  String               @id @default(cuid())
  leaseAgreements     LeaseAgreement[]
  maintenanceRequests MaintenanceRequest[]
  moveInDate          DateTime?
  name                String?
  payments            Payment[]
  status              EnumTenantStatus?
  tenantId            Int?
  tickets             Ticket[]
  updatedAt           DateTime             @updatedAt
}

model Space {
  amenities           String?
  availability        EnumSpaceAvailability?
  createdAt           DateTime               @default(now())
  id                  String                 @id @default(cuid())
  leaseAgreements     LeaseAgreement[]
  location            String?
  maintenanceRequests MaintenanceRequest[]
  monthlyRent         Float?
  size                Int?
  spaceId             Int?
  typeField           String?
  updatedAt           DateTime               @updatedAt
}

model LeaseAgreement {
  createdAt         DateTime  @default(now())
  id                String    @id @default(cuid())
  leaseEndDate      DateTime?
  leaseId           Int?
  leaseStartDate    DateTime?
  leaseTerms        String?
  monthlyRent       Float?
  renewalOptions    String?
  securityDeposit   Float?
  space             Space?    @relation(fields: [spaceId], references: [id])
  spaceId           String?
  tenant            Tenant?   @relation(fields: [tenantId], references: [id])
  tenantId          String?
  terminationClause String?
  updatedAt         DateTime  @updatedAt
}

model Mall {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
}

model Payment {
  amount        Float?
  createdAt     DateTime                  @default(now())
  id            String                    @id @default(cuid())
  lease         String?
  paymentDate   DateTime?
  paymentId     Int?
  paymentMethod String?
  paymentStatus EnumPaymentPaymentStatus?
  tenant        Tenant?                   @relation(fields: [tenantId], references: [id])
  tenantId      String?
  updatedAt     DateTime                  @updatedAt
}

model MaintenanceRequest {
  createdAt        DateTime                      @default(now())
  id               String                        @id @default(cuid())
  issueDescription String?
  requestDate      DateTime?
  requestId        Int?
  resolutionDate   DateTime?
  space            Space?                        @relation(fields: [spaceId], references: [id])
  spaceId          String?
  status           EnumMaintenanceRequestStatus?
  tenant           Tenant?                       @relation(fields: [tenantId], references: [id])
  tenantId         String?
  updatedAt        DateTime                      @updatedAt
}

model ContactLog {
  contactDate   DateTime?
  contactMethod String?
  contactReason String?
  createdAt     DateTime  @default(now())
  id            String    @id @default(cuid())
  logId         Int?
  notes         String?
  tenant        Tenant?   @relation(fields: [tenantId], references: [id])
  tenantId      String?
  updatedAt     DateTime  @updatedAt
}

model User {
  createdAt DateTime @default(now())
  email     String?  @unique
  firstName String?
  id        String   @id @default(cuid())
  lastName  String?
  password  String
  roles     Json
  updatedAt DateTime @updatedAt
  username  String   @unique
}

model Promotion {
  createdAt           DateTime  @default(now())
  description         String?
  discount            String?
  endDate             DateTime?
  id                  String    @id @default(cuid())
  participatingStores String?
  promotionId         String?
  startDate           DateTime?
  title               String?
  updatedAt           DateTime  @updatedAt
}

model Visitor {
  createdAt         DateTime       @default(now())
  email             String?
  feedback          String?
  feedbacks         Feedback[]
  id                String         @id @default(cuid())
  name              String?
  phone             String?
  preferences       String?
  storeReviewsItems StoreReviews[]
  tickets           Ticket[]
  updatedAt         DateTime       @updatedAt
  visitDate         DateTime?
  visitorId         String?
}

model Feedback {
  comments       String?
  createdAt      DateTime                    @default(now())
  date           DateTime?
  feedbackId     String?
  id             String                      @id @default(cuid())
  rating         Int?
  responseStatus EnumFeedbackResponseStatus?
  updatedAt      DateTime                    @updatedAt
  visitor        Visitor?                    @relation(fields: [visitorId], references: [id])
  visitorId      String?
}

model Event {
  createdAt    DateTime         @default(now())
  description  String?
  endDate      DateTime?
  eventId      String?
  id           String           @id @default(cuid())
  location     String?
  name         String?
  organizer    String?
  participants String?
  startDate    DateTime?
  status       EnumEventStatus?
  updatedAt    DateTime         @updatedAt
}

model LoyaltyProgram {
  createdAt        DateTime  @default(now())
  description      String?
  endDate          DateTime?
  id               String    @id @default(cuid())
  loyaltyProgramId String?
  name             String?
  participants     String?
  pointsEarned     Int?
  rewards          String?
  startDate        DateTime?
  updatedAt        DateTime  @updatedAt
}

model Store {
  category          String?
  contactNumber     String?
  contactPerson     String?
  createdAt         DateTime       @default(now())
  email             String?
  id                String         @id @default(cuid())
  location          String?
  name              String?
  openingHours      String?
  socialMediaLinks  String?
  storeId           String?
  storeReviewsItems StoreReviews[]
  updatedAt         DateTime       @updatedAt
  website           String?
}

model NewsletterSubscription {
  createdAt        DateTime                          @default(now())
  email            String?
  id               String                            @id @default(cuid())
  status           EnumNewsletterSubscriptionStatus?
  subscriptionDate DateTime?
  subscriptionId   String?
  updatedAt        DateTime                          @updatedAt
}

model StoreReviews {
  comments  String?
  createdAt DateTime  @default(now())
  date      DateTime?
  id        String    @id @default(cuid())
  rating    Int?
  reviewId  String?
  store     Store?    @relation(fields: [storeId], references: [id])
  storeId   String?
  updatedAt DateTime  @updatedAt
  visitor   Visitor?  @relation(fields: [visitorId], references: [id])
  visitorId String?
}

model Advertisement {
  adId           String?
  createdAt      DateTime  @default(now())
  description    String?
  endDate        DateTime?
  id             String    @id @default(cuid())
  placement      String?
  startDate      DateTime?
  targetAudience String?
  title          String?
  updatedAt      DateTime  @updatedAt
}

model Ticket {
  assignedTo     String?
  category       String?
  createdAt      DateTime            @default(now())
  creationDate   DateTime?
  description    String?
  dueDate        DateTime?
  id             String              @id @default(cuid())
  priority       EnumTicketPriority?
  resolution     String?
  resolutionDate DateTime?
  status         EnumTicketStatus?
  tenant         Tenant?             @relation(fields: [tenantId], references: [id])
  tenantId       String?
  title          String?
  updatedAt      DateTime            @updatedAt
  visitor        Visitor?            @relation(fields: [visitorId], references: [id])
  visitorId      String?
}

model SupportStaff {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
}

model CustomerFeedback {
  comments  String?
  createdAt DateTime  @default(now())
  date      DateTime?
  id        String    @id @default(cuid())
  rating    Int?
  updatedAt DateTime  @updatedAt
}

model IssueCategory {
  createdAt        DateTime @default(now())
  description      String?
  id               String   @id @default(cuid())
  name             String?
  parentCategoryId String?
  updatedAt        DateTime @updatedAt
}

model KnowledgeBaseArticle {
  author          String?
  categoryId      String?
  content         String?
  createdAt       DateTime  @default(now())
  creationDate    DateTime?
  id              String    @id @default(cuid())
  lastUpdatedDate DateTime?
  tags            String?
  title           String?
  updatedAt       DateTime  @updatedAt
}

model ServiceLevelAgreement {
  createdAt      DateTime                           @default(now())
  description    String?
  id             String                             @id @default(cuid())
  name           String?
  penalties      String?
  priority       EnumServiceLevelAgreementPriority?
  resolutionTime Int?
  responseTime   Int?
  updatedAt      DateTime                           @updatedAt
}

model ServiceRequest {
  assignedTo     String?
  completionDate DateTime?
  createdAt      DateTime                  @default(now())
  creationDate   DateTime?
  description    String?
  id             String                    @id @default(cuid())
  requestType    String?
  status         EnumServiceRequestStatus?
  updatedAt      DateTime                  @updatedAt
}

model Asset {
  assignedTo             String?
  category               String?
  createdAt              DateTime         @default(now())
  id                     String           @id @default(cuid())
  location               String?
  name                   String?
  purchaseDate           DateTime?
  status                 EnumAssetStatus?
  updatedAt              DateTime         @updatedAt
  warrantyExpirationDate DateTime?
}

enum EnumTenantStatus {
  Option1
}

enum EnumSpaceAvailability {
  Option1
}

enum EnumPaymentPaymentStatus {
  Option1
}

enum EnumMaintenanceRequestStatus {
  Option1
}

enum EnumFeedbackResponseStatus {
  Option1
}

enum EnumEventStatus {
  Option1
}

enum EnumNewsletterSubscriptionStatus {
  Option1
}

enum EnumTicketPriority {
  Option1
}

enum EnumTicketStatus {
  Option1
}

enum EnumServiceLevelAgreementPriority {
  Option1
}

enum EnumServiceRequestStatus {
  Option1
}

enum EnumAssetStatus {
  Option1
}
