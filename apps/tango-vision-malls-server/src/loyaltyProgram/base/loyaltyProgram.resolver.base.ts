/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LoyaltyProgram } from "./LoyaltyProgram";
import { LoyaltyProgramCountArgs } from "./LoyaltyProgramCountArgs";
import { LoyaltyProgramFindManyArgs } from "./LoyaltyProgramFindManyArgs";
import { LoyaltyProgramFindUniqueArgs } from "./LoyaltyProgramFindUniqueArgs";
import { CreateLoyaltyProgramArgs } from "./CreateLoyaltyProgramArgs";
import { UpdateLoyaltyProgramArgs } from "./UpdateLoyaltyProgramArgs";
import { DeleteLoyaltyProgramArgs } from "./DeleteLoyaltyProgramArgs";
import { LoyaltyProgramService } from "../loyaltyProgram.service";
@graphql.Resolver(() => LoyaltyProgram)
export class LoyaltyProgramResolverBase {
  constructor(protected readonly service: LoyaltyProgramService) {}

  async _loyaltyProgramsMeta(
    @graphql.Args() args: LoyaltyProgramCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LoyaltyProgram])
  async loyaltyPrograms(
    @graphql.Args() args: LoyaltyProgramFindManyArgs
  ): Promise<LoyaltyProgram[]> {
    return this.service.loyaltyPrograms(args);
  }

  @graphql.Query(() => LoyaltyProgram, { nullable: true })
  async loyaltyProgram(
    @graphql.Args() args: LoyaltyProgramFindUniqueArgs
  ): Promise<LoyaltyProgram | null> {
    const result = await this.service.loyaltyProgram(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LoyaltyProgram)
  async createLoyaltyProgram(
    @graphql.Args() args: CreateLoyaltyProgramArgs
  ): Promise<LoyaltyProgram> {
    return await this.service.createLoyaltyProgram({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LoyaltyProgram)
  async updateLoyaltyProgram(
    @graphql.Args() args: UpdateLoyaltyProgramArgs
  ): Promise<LoyaltyProgram | null> {
    try {
      return await this.service.updateLoyaltyProgram({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LoyaltyProgram)
  async deleteLoyaltyProgram(
    @graphql.Args() args: DeleteLoyaltyProgramArgs
  ): Promise<LoyaltyProgram | null> {
    try {
      return await this.service.deleteLoyaltyProgram(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
