/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  NewsletterSubscription as PrismaNewsletterSubscription,
} from "@prisma/client";

export class NewsletterSubscriptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NewsletterSubscriptionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.newsletterSubscription.count(args);
  }

  async newsletterSubscriptions(
    args: Prisma.NewsletterSubscriptionFindManyArgs
  ): Promise<PrismaNewsletterSubscription[]> {
    return this.prisma.newsletterSubscription.findMany(args);
  }
  async newsletterSubscription(
    args: Prisma.NewsletterSubscriptionFindUniqueArgs
  ): Promise<PrismaNewsletterSubscription | null> {
    return this.prisma.newsletterSubscription.findUnique(args);
  }
  async createNewsletterSubscription(
    args: Prisma.NewsletterSubscriptionCreateArgs
  ): Promise<PrismaNewsletterSubscription> {
    return this.prisma.newsletterSubscription.create(args);
  }
  async updateNewsletterSubscription(
    args: Prisma.NewsletterSubscriptionUpdateArgs
  ): Promise<PrismaNewsletterSubscription> {
    return this.prisma.newsletterSubscription.update(args);
  }
  async deleteNewsletterSubscription(
    args: Prisma.NewsletterSubscriptionDeleteArgs
  ): Promise<PrismaNewsletterSubscription> {
    return this.prisma.newsletterSubscription.delete(args);
  }
}
