/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NewsletterSubscriptionService } from "../newsletterSubscription.service";
import { NewsletterSubscriptionCreateInput } from "./NewsletterSubscriptionCreateInput";
import { NewsletterSubscription } from "./NewsletterSubscription";
import { NewsletterSubscriptionFindManyArgs } from "./NewsletterSubscriptionFindManyArgs";
import { NewsletterSubscriptionWhereUniqueInput } from "./NewsletterSubscriptionWhereUniqueInput";
import { NewsletterSubscriptionUpdateInput } from "./NewsletterSubscriptionUpdateInput";

export class NewsletterSubscriptionControllerBase {
  constructor(protected readonly service: NewsletterSubscriptionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NewsletterSubscription })
  @swagger.ApiBody({
    type: NewsletterSubscriptionCreateInput,
  })
  async createNewsletterSubscription(
    @common.Body() data: NewsletterSubscriptionCreateInput
  ): Promise<NewsletterSubscription> {
    return await this.service.createNewsletterSubscription({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        status: true,
        subscriptionDate: true,
        subscriptionId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [NewsletterSubscription] })
  @ApiNestedQuery(NewsletterSubscriptionFindManyArgs)
  async newsletterSubscriptions(
    @common.Req() request: Request
  ): Promise<NewsletterSubscription[]> {
    const args = plainToClass(
      NewsletterSubscriptionFindManyArgs,
      request.query
    );
    return this.service.newsletterSubscriptions({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        status: true,
        subscriptionDate: true,
        subscriptionId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NewsletterSubscription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async newsletterSubscription(
    @common.Param() params: NewsletterSubscriptionWhereUniqueInput
  ): Promise<NewsletterSubscription | null> {
    const result = await this.service.newsletterSubscription({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        status: true,
        subscriptionDate: true,
        subscriptionId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NewsletterSubscription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: NewsletterSubscriptionUpdateInput,
  })
  async updateNewsletterSubscription(
    @common.Param() params: NewsletterSubscriptionWhereUniqueInput,
    @common.Body() data: NewsletterSubscriptionUpdateInput
  ): Promise<NewsletterSubscription | null> {
    try {
      return await this.service.updateNewsletterSubscription({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          status: true,
          subscriptionDate: true,
          subscriptionId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NewsletterSubscription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNewsletterSubscription(
    @common.Param() params: NewsletterSubscriptionWhereUniqueInput
  ): Promise<NewsletterSubscription | null> {
    try {
      return await this.service.deleteNewsletterSubscription({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          status: true,
          subscriptionDate: true,
          subscriptionId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
