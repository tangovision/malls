/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { NewsletterSubscription } from "./NewsletterSubscription";
import { NewsletterSubscriptionCountArgs } from "./NewsletterSubscriptionCountArgs";
import { NewsletterSubscriptionFindManyArgs } from "./NewsletterSubscriptionFindManyArgs";
import { NewsletterSubscriptionFindUniqueArgs } from "./NewsletterSubscriptionFindUniqueArgs";
import { CreateNewsletterSubscriptionArgs } from "./CreateNewsletterSubscriptionArgs";
import { UpdateNewsletterSubscriptionArgs } from "./UpdateNewsletterSubscriptionArgs";
import { DeleteNewsletterSubscriptionArgs } from "./DeleteNewsletterSubscriptionArgs";
import { NewsletterSubscriptionService } from "../newsletterSubscription.service";
@graphql.Resolver(() => NewsletterSubscription)
export class NewsletterSubscriptionResolverBase {
  constructor(protected readonly service: NewsletterSubscriptionService) {}

  async _newsletterSubscriptionsMeta(
    @graphql.Args() args: NewsletterSubscriptionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [NewsletterSubscription])
  async newsletterSubscriptions(
    @graphql.Args() args: NewsletterSubscriptionFindManyArgs
  ): Promise<NewsletterSubscription[]> {
    return this.service.newsletterSubscriptions(args);
  }

  @graphql.Query(() => NewsletterSubscription, { nullable: true })
  async newsletterSubscription(
    @graphql.Args() args: NewsletterSubscriptionFindUniqueArgs
  ): Promise<NewsletterSubscription | null> {
    const result = await this.service.newsletterSubscription(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => NewsletterSubscription)
  async createNewsletterSubscription(
    @graphql.Args() args: CreateNewsletterSubscriptionArgs
  ): Promise<NewsletterSubscription> {
    return await this.service.createNewsletterSubscription({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => NewsletterSubscription)
  async updateNewsletterSubscription(
    @graphql.Args() args: UpdateNewsletterSubscriptionArgs
  ): Promise<NewsletterSubscription | null> {
    try {
      return await this.service.updateNewsletterSubscription({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => NewsletterSubscription)
  async deleteNewsletterSubscription(
    @graphql.Args() args: DeleteNewsletterSubscriptionArgs
  ): Promise<NewsletterSubscription | null> {
    try {
      return await this.service.deleteNewsletterSubscription(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
