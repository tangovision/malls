/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StoreReviewsService } from "../storeReviews.service";
import { StoreReviewsCreateInput } from "./StoreReviewsCreateInput";
import { StoreReviews } from "./StoreReviews";
import { StoreReviewsFindManyArgs } from "./StoreReviewsFindManyArgs";
import { StoreReviewsWhereUniqueInput } from "./StoreReviewsWhereUniqueInput";
import { StoreReviewsUpdateInput } from "./StoreReviewsUpdateInput";

export class StoreReviewsControllerBase {
  constructor(protected readonly service: StoreReviewsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StoreReviews })
  @swagger.ApiBody({
    type: StoreReviewsCreateInput,
  })
  async createStoreReviews(
    @common.Body() data: StoreReviewsCreateInput
  ): Promise<StoreReviews> {
    return await this.service.createStoreReviews({
      data: {
        ...data,

        store: data.store
          ? {
              connect: data.store,
            }
          : undefined,

        visitor: data.visitor
          ? {
              connect: data.visitor,
            }
          : undefined,
      },
      select: {
        comments: true,
        createdAt: true,
        date: true,
        id: true,
        rating: true,
        reviewId: true,

        store: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        visitor: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StoreReviews] })
  @ApiNestedQuery(StoreReviewsFindManyArgs)
  async storeReviewsItems(
    @common.Req() request: Request
  ): Promise<StoreReviews[]> {
    const args = plainToClass(StoreReviewsFindManyArgs, request.query);
    return this.service.storeReviewsItems({
      ...args,
      select: {
        comments: true,
        createdAt: true,
        date: true,
        id: true,
        rating: true,
        reviewId: true,

        store: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        visitor: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StoreReviews })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async storeReviews(
    @common.Param() params: StoreReviewsWhereUniqueInput
  ): Promise<StoreReviews | null> {
    const result = await this.service.storeReviews({
      where: params,
      select: {
        comments: true,
        createdAt: true,
        date: true,
        id: true,
        rating: true,
        reviewId: true,

        store: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        visitor: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StoreReviews })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: StoreReviewsUpdateInput,
  })
  async updateStoreReviews(
    @common.Param() params: StoreReviewsWhereUniqueInput,
    @common.Body() data: StoreReviewsUpdateInput
  ): Promise<StoreReviews | null> {
    try {
      return await this.service.updateStoreReviews({
        where: params,
        data: {
          ...data,

          store: data.store
            ? {
                connect: data.store,
              }
            : undefined,

          visitor: data.visitor
            ? {
                connect: data.visitor,
              }
            : undefined,
        },
        select: {
          comments: true,
          createdAt: true,
          date: true,
          id: true,
          rating: true,
          reviewId: true,

          store: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          visitor: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StoreReviews })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStoreReviews(
    @common.Param() params: StoreReviewsWhereUniqueInput
  ): Promise<StoreReviews | null> {
    try {
      return await this.service.deleteStoreReviews({
        where: params,
        select: {
          comments: true,
          createdAt: true,
          date: true,
          id: true,
          rating: true,
          reviewId: true,

          store: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          visitor: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
