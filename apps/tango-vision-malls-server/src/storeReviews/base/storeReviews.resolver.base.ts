/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StoreReviews } from "./StoreReviews";
import { StoreReviewsCountArgs } from "./StoreReviewsCountArgs";
import { StoreReviewsFindManyArgs } from "./StoreReviewsFindManyArgs";
import { StoreReviewsFindUniqueArgs } from "./StoreReviewsFindUniqueArgs";
import { CreateStoreReviewsArgs } from "./CreateStoreReviewsArgs";
import { UpdateStoreReviewsArgs } from "./UpdateStoreReviewsArgs";
import { DeleteStoreReviewsArgs } from "./DeleteStoreReviewsArgs";
import { Store } from "../../store/base/Store";
import { Visitor } from "../../visitor/base/Visitor";
import { StoreReviewsService } from "../storeReviews.service";
@graphql.Resolver(() => StoreReviews)
export class StoreReviewsResolverBase {
  constructor(protected readonly service: StoreReviewsService) {}

  async _storeReviewsItemsMeta(
    @graphql.Args() args: StoreReviewsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StoreReviews])
  async storeReviewsItems(
    @graphql.Args() args: StoreReviewsFindManyArgs
  ): Promise<StoreReviews[]> {
    return this.service.storeReviewsItems(args);
  }

  @graphql.Query(() => StoreReviews, { nullable: true })
  async storeReviews(
    @graphql.Args() args: StoreReviewsFindUniqueArgs
  ): Promise<StoreReviews | null> {
    const result = await this.service.storeReviews(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StoreReviews)
  async createStoreReviews(
    @graphql.Args() args: CreateStoreReviewsArgs
  ): Promise<StoreReviews> {
    return await this.service.createStoreReviews({
      ...args,
      data: {
        ...args.data,

        store: args.data.store
          ? {
              connect: args.data.store,
            }
          : undefined,

        visitor: args.data.visitor
          ? {
              connect: args.data.visitor,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => StoreReviews)
  async updateStoreReviews(
    @graphql.Args() args: UpdateStoreReviewsArgs
  ): Promise<StoreReviews | null> {
    try {
      return await this.service.updateStoreReviews({
        ...args,
        data: {
          ...args.data,

          store: args.data.store
            ? {
                connect: args.data.store,
              }
            : undefined,

          visitor: args.data.visitor
            ? {
                connect: args.data.visitor,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StoreReviews)
  async deleteStoreReviews(
    @graphql.Args() args: DeleteStoreReviewsArgs
  ): Promise<StoreReviews | null> {
    try {
      return await this.service.deleteStoreReviews(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Store, {
    nullable: true,
    name: "store",
  })
  async getStore(
    @graphql.Parent() parent: StoreReviews
  ): Promise<Store | null> {
    const result = await this.service.getStore(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Visitor, {
    nullable: true,
    name: "visitor",
  })
  async getVisitor(
    @graphql.Parent() parent: StoreReviews
  ): Promise<Visitor | null> {
    const result = await this.service.getVisitor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
