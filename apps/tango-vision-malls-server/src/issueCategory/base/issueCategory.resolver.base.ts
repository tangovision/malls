/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { IssueCategory } from "./IssueCategory";
import { IssueCategoryCountArgs } from "./IssueCategoryCountArgs";
import { IssueCategoryFindManyArgs } from "./IssueCategoryFindManyArgs";
import { IssueCategoryFindUniqueArgs } from "./IssueCategoryFindUniqueArgs";
import { CreateIssueCategoryArgs } from "./CreateIssueCategoryArgs";
import { UpdateIssueCategoryArgs } from "./UpdateIssueCategoryArgs";
import { DeleteIssueCategoryArgs } from "./DeleteIssueCategoryArgs";
import { IssueCategoryService } from "../issueCategory.service";
@graphql.Resolver(() => IssueCategory)
export class IssueCategoryResolverBase {
  constructor(protected readonly service: IssueCategoryService) {}

  async _issueCategoriesMeta(
    @graphql.Args() args: IssueCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [IssueCategory])
  async issueCategories(
    @graphql.Args() args: IssueCategoryFindManyArgs
  ): Promise<IssueCategory[]> {
    return this.service.issueCategories(args);
  }

  @graphql.Query(() => IssueCategory, { nullable: true })
  async issueCategory(
    @graphql.Args() args: IssueCategoryFindUniqueArgs
  ): Promise<IssueCategory | null> {
    const result = await this.service.issueCategory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => IssueCategory)
  async createIssueCategory(
    @graphql.Args() args: CreateIssueCategoryArgs
  ): Promise<IssueCategory> {
    return await this.service.createIssueCategory({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => IssueCategory)
  async updateIssueCategory(
    @graphql.Args() args: UpdateIssueCategoryArgs
  ): Promise<IssueCategory | null> {
    try {
      return await this.service.updateIssueCategory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IssueCategory)
  async deleteIssueCategory(
    @graphql.Args() args: DeleteIssueCategoryArgs
  ): Promise<IssueCategory | null> {
    try {
      return await this.service.deleteIssueCategory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
