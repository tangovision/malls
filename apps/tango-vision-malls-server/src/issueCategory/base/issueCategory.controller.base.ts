/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IssueCategoryService } from "../issueCategory.service";
import { IssueCategoryCreateInput } from "./IssueCategoryCreateInput";
import { IssueCategory } from "./IssueCategory";
import { IssueCategoryFindManyArgs } from "./IssueCategoryFindManyArgs";
import { IssueCategoryWhereUniqueInput } from "./IssueCategoryWhereUniqueInput";
import { IssueCategoryUpdateInput } from "./IssueCategoryUpdateInput";

export class IssueCategoryControllerBase {
  constructor(protected readonly service: IssueCategoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: IssueCategory })
  @swagger.ApiBody({
    type: IssueCategoryCreateInput,
  })
  async createIssueCategory(
    @common.Body() data: IssueCategoryCreateInput
  ): Promise<IssueCategory> {
    return await this.service.createIssueCategory({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        parentCategoryId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [IssueCategory] })
  @ApiNestedQuery(IssueCategoryFindManyArgs)
  async issueCategories(
    @common.Req() request: Request
  ): Promise<IssueCategory[]> {
    const args = plainToClass(IssueCategoryFindManyArgs, request.query);
    return this.service.issueCategories({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        parentCategoryId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: IssueCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async issueCategory(
    @common.Param() params: IssueCategoryWhereUniqueInput
  ): Promise<IssueCategory | null> {
    const result = await this.service.issueCategory({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        parentCategoryId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: IssueCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: IssueCategoryUpdateInput,
  })
  async updateIssueCategory(
    @common.Param() params: IssueCategoryWhereUniqueInput,
    @common.Body() data: IssueCategoryUpdateInput
  ): Promise<IssueCategory | null> {
    try {
      return await this.service.updateIssueCategory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          parentCategoryId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: IssueCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIssueCategory(
    @common.Param() params: IssueCategoryWhereUniqueInput
  ): Promise<IssueCategory | null> {
    try {
      return await this.service.deleteIssueCategory({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          parentCategoryId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
