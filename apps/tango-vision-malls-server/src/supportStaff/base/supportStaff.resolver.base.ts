/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SupportStaff } from "./SupportStaff";
import { SupportStaffCountArgs } from "./SupportStaffCountArgs";
import { SupportStaffFindManyArgs } from "./SupportStaffFindManyArgs";
import { SupportStaffFindUniqueArgs } from "./SupportStaffFindUniqueArgs";
import { DeleteSupportStaffArgs } from "./DeleteSupportStaffArgs";
import { SupportStaffService } from "../supportStaff.service";
@graphql.Resolver(() => SupportStaff)
export class SupportStaffResolverBase {
  constructor(protected readonly service: SupportStaffService) {}

  async _supportStaffsMeta(
    @graphql.Args() args: SupportStaffCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SupportStaff])
  async supportStaffs(
    @graphql.Args() args: SupportStaffFindManyArgs
  ): Promise<SupportStaff[]> {
    return this.service.supportStaffs(args);
  }

  @graphql.Query(() => SupportStaff, { nullable: true })
  async supportStaff(
    @graphql.Args() args: SupportStaffFindUniqueArgs
  ): Promise<SupportStaff | null> {
    const result = await this.service.supportStaff(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SupportStaff)
  async deleteSupportStaff(
    @graphql.Args() args: DeleteSupportStaffArgs
  ): Promise<SupportStaff | null> {
    try {
      return await this.service.deleteSupportStaff(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
