/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SupportStaffService } from "../supportStaff.service";
import { SupportStaffCreateInput } from "./SupportStaffCreateInput";
import { SupportStaff } from "./SupportStaff";
import { SupportStaffFindManyArgs } from "./SupportStaffFindManyArgs";
import { SupportStaffWhereUniqueInput } from "./SupportStaffWhereUniqueInput";
import { SupportStaffUpdateInput } from "./SupportStaffUpdateInput";

export class SupportStaffControllerBase {
  constructor(protected readonly service: SupportStaffService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SupportStaff })
  @swagger.ApiBody({
    type: SupportStaffCreateInput,
  })
  async createSupportStaff(
    @common.Body() data: SupportStaffCreateInput
  ): Promise<SupportStaff> {
    return await this.service.createSupportStaff({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SupportStaff] })
  @ApiNestedQuery(SupportStaffFindManyArgs)
  async supportStaffs(@common.Req() request: Request): Promise<SupportStaff[]> {
    const args = plainToClass(SupportStaffFindManyArgs, request.query);
    return this.service.supportStaffs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SupportStaff })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async supportStaff(
    @common.Param() params: SupportStaffWhereUniqueInput
  ): Promise<SupportStaff | null> {
    const result = await this.service.supportStaff({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SupportStaff })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: SupportStaffUpdateInput,
  })
  async updateSupportStaff(
    @common.Param() params: SupportStaffWhereUniqueInput,
    @common.Body() data: SupportStaffUpdateInput
  ): Promise<SupportStaff | null> {
    try {
      return await this.service.updateSupportStaff({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SupportStaff })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSupportStaff(
    @common.Param() params: SupportStaffWhereUniqueInput
  ): Promise<SupportStaff | null> {
    try {
      return await this.service.deleteSupportStaff({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
