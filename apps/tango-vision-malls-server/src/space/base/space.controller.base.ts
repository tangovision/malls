/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SpaceService } from "../space.service";
import { SpaceCreateInput } from "./SpaceCreateInput";
import { Space } from "./Space";
import { SpaceFindManyArgs } from "./SpaceFindManyArgs";
import { SpaceWhereUniqueInput } from "./SpaceWhereUniqueInput";
import { SpaceUpdateInput } from "./SpaceUpdateInput";
import { LeaseAgreementFindManyArgs } from "../../leaseAgreement/base/LeaseAgreementFindManyArgs";
import { LeaseAgreement } from "../../leaseAgreement/base/LeaseAgreement";
import { LeaseAgreementWhereUniqueInput } from "../../leaseAgreement/base/LeaseAgreementWhereUniqueInput";
import { MaintenanceRequestFindManyArgs } from "../../maintenanceRequest/base/MaintenanceRequestFindManyArgs";
import { MaintenanceRequest } from "../../maintenanceRequest/base/MaintenanceRequest";
import { MaintenanceRequestWhereUniqueInput } from "../../maintenanceRequest/base/MaintenanceRequestWhereUniqueInput";

export class SpaceControllerBase {
  constructor(protected readonly service: SpaceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Space })
  async createSpace(@common.Body() data: SpaceCreateInput): Promise<Space> {
    return await this.service.createSpace({
      data: data,
      select: {
        amenities: true,
        availability: true,
        createdAt: true,
        id: true,
        location: true,
        monthlyRent: true,
        size: true,
        spaceId: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Space] })
  @ApiNestedQuery(SpaceFindManyArgs)
  async spaces(@common.Req() request: Request): Promise<Space[]> {
    const args = plainToClass(SpaceFindManyArgs, request.query);
    return this.service.spaces({
      ...args,
      select: {
        amenities: true,
        availability: true,
        createdAt: true,
        id: true,
        location: true,
        monthlyRent: true,
        size: true,
        spaceId: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Space })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async space(
    @common.Param() params: SpaceWhereUniqueInput
  ): Promise<Space | null> {
    const result = await this.service.space({
      where: params,
      select: {
        amenities: true,
        availability: true,
        createdAt: true,
        id: true,
        location: true,
        monthlyRent: true,
        size: true,
        spaceId: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Space })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSpace(
    @common.Param() params: SpaceWhereUniqueInput,
    @common.Body() data: SpaceUpdateInput
  ): Promise<Space | null> {
    try {
      return await this.service.updateSpace({
        where: params,
        data: data,
        select: {
          amenities: true,
          availability: true,
          createdAt: true,
          id: true,
          location: true,
          monthlyRent: true,
          size: true,
          spaceId: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Space })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSpace(
    @common.Param() params: SpaceWhereUniqueInput
  ): Promise<Space | null> {
    try {
      return await this.service.deleteSpace({
        where: params,
        select: {
          amenities: true,
          availability: true,
          createdAt: true,
          id: true,
          location: true,
          monthlyRent: true,
          size: true,
          spaceId: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/leaseAgreements")
  @ApiNestedQuery(LeaseAgreementFindManyArgs)
  async findLeaseAgreements(
    @common.Req() request: Request,
    @common.Param() params: SpaceWhereUniqueInput
  ): Promise<LeaseAgreement[]> {
    const query = plainToClass(LeaseAgreementFindManyArgs, request.query);
    const results = await this.service.findLeaseAgreements(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        leaseEndDate: true,
        leaseId: true,
        leaseStartDate: true,
        leaseTerms: true,
        monthlyRent: true,
        renewalOptions: true,
        securityDeposit: true,

        space: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        terminationClause: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/leaseAgreements")
  async connectLeaseAgreements(
    @common.Param() params: SpaceWhereUniqueInput,
    @common.Body() body: LeaseAgreementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaseAgreements: {
        connect: body,
      },
    };
    await this.service.updateSpace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/leaseAgreements")
  async updateLeaseAgreements(
    @common.Param() params: SpaceWhereUniqueInput,
    @common.Body() body: LeaseAgreementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaseAgreements: {
        set: body,
      },
    };
    await this.service.updateSpace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/leaseAgreements")
  async disconnectLeaseAgreements(
    @common.Param() params: SpaceWhereUniqueInput,
    @common.Body() body: LeaseAgreementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaseAgreements: {
        disconnect: body,
      },
    };
    await this.service.updateSpace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/maintenanceRequests")
  @ApiNestedQuery(MaintenanceRequestFindManyArgs)
  async findMaintenanceRequests(
    @common.Req() request: Request,
    @common.Param() params: SpaceWhereUniqueInput
  ): Promise<MaintenanceRequest[]> {
    const query = plainToClass(MaintenanceRequestFindManyArgs, request.query);
    const results = await this.service.findMaintenanceRequests(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        issueDescription: true,
        requestDate: true,
        requestId: true,
        resolutionDate: true,

        space: {
          select: {
            id: true,
          },
        },

        status: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/maintenanceRequests")
  async connectMaintenanceRequests(
    @common.Param() params: SpaceWhereUniqueInput,
    @common.Body() body: MaintenanceRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceRequests: {
        connect: body,
      },
    };
    await this.service.updateSpace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/maintenanceRequests")
  async updateMaintenanceRequests(
    @common.Param() params: SpaceWhereUniqueInput,
    @common.Body() body: MaintenanceRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceRequests: {
        set: body,
      },
    };
    await this.service.updateSpace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/maintenanceRequests")
  async disconnectMaintenanceRequests(
    @common.Param() params: SpaceWhereUniqueInput,
    @common.Body() body: MaintenanceRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceRequests: {
        disconnect: body,
      },
    };
    await this.service.updateSpace({
      where: params,
      data,
      select: { id: true },
    });
  }
}
