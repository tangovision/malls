/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsString,
  MaxLength,
  IsOptional,
  ValidateNested,
  IsDate,
  IsEnum,
  IsInt,
  Min,
  Max,
} from "class-validator";

import { ContactLog } from "../../contactLog/base/ContactLog";
import { Type } from "class-transformer";
import { LeaseAgreement } from "../../leaseAgreement/base/LeaseAgreement";
import { MaintenanceRequest } from "../../maintenanceRequest/base/MaintenanceRequest";
import { Payment } from "../../payment/base/Payment";
import { EnumTenantStatus } from "./EnumTenantStatus";

@ObjectType()
class Tenant {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  businessType!: string | null;

  @ApiProperty({
    required: false,
    type: () => [ContactLog],
  })
  @ValidateNested()
  @Type(() => ContactLog)
  @IsOptional()
  contactLogs?: Array<ContactLog>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  contactNumber!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  contactPerson!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [LeaseAgreement],
  })
  @ValidateNested()
  @Type(() => LeaseAgreement)
  @IsOptional()
  leaseAgreements?: Array<LeaseAgreement>;

  @ApiProperty({
    required: false,
    type: () => [MaintenanceRequest],
  })
  @ValidateNested()
  @Type(() => MaintenanceRequest)
  @IsOptional()
  maintenanceRequests?: Array<MaintenanceRequest>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  moveInDate!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Payment],
  })
  @ValidateNested()
  @Type(() => Payment)
  @IsOptional()
  payments?: Array<Payment>;

  @ApiProperty({
    required: false,
    enum: EnumTenantStatus,
  })
  @IsEnum(EnumTenantStatus)
  @IsOptional()
  @Field(() => EnumTenantStatus, {
    nullable: true,
  })
  status?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  tenantId!: number | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Tenant as Tenant };
