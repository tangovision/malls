/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TenantService } from "../tenant.service";
import { TenantCreateInput } from "./TenantCreateInput";
import { Tenant } from "./Tenant";
import { TenantFindManyArgs } from "./TenantFindManyArgs";
import { TenantWhereUniqueInput } from "./TenantWhereUniqueInput";
import { TenantUpdateInput } from "./TenantUpdateInput";
import { ContactLogFindManyArgs } from "../../contactLog/base/ContactLogFindManyArgs";
import { ContactLog } from "../../contactLog/base/ContactLog";
import { ContactLogWhereUniqueInput } from "../../contactLog/base/ContactLogWhereUniqueInput";
import { LeaseAgreementFindManyArgs } from "../../leaseAgreement/base/LeaseAgreementFindManyArgs";
import { LeaseAgreement } from "../../leaseAgreement/base/LeaseAgreement";
import { LeaseAgreementWhereUniqueInput } from "../../leaseAgreement/base/LeaseAgreementWhereUniqueInput";
import { MaintenanceRequestFindManyArgs } from "../../maintenanceRequest/base/MaintenanceRequestFindManyArgs";
import { MaintenanceRequest } from "../../maintenanceRequest/base/MaintenanceRequest";
import { MaintenanceRequestWhereUniqueInput } from "../../maintenanceRequest/base/MaintenanceRequestWhereUniqueInput";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";

export class TenantControllerBase {
  constructor(protected readonly service: TenantService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Tenant })
  @swagger.ApiBody({
    type: TenantCreateInput,
  })
  async createTenant(@common.Body() data: TenantCreateInput): Promise<Tenant> {
    return await this.service.createTenant({
      data: data,
      select: {
        businessType: true,
        contactNumber: true,
        contactPerson: true,
        createdAt: true,
        email: true,
        id: true,
        moveInDate: true,
        name: true,
        status: true,
        tenantId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Tenant] })
  @ApiNestedQuery(TenantFindManyArgs)
  async tenants(@common.Req() request: Request): Promise<Tenant[]> {
    const args = plainToClass(TenantFindManyArgs, request.query);
    return this.service.tenants({
      ...args,
      select: {
        businessType: true,
        contactNumber: true,
        contactPerson: true,
        createdAt: true,
        email: true,
        id: true,
        moveInDate: true,
        name: true,
        status: true,
        tenantId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Tenant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tenant(
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Tenant | null> {
    const result = await this.service.tenant({
      where: params,
      select: {
        businessType: true,
        contactNumber: true,
        contactPerson: true,
        createdAt: true,
        email: true,
        id: true,
        moveInDate: true,
        name: true,
        status: true,
        tenantId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Tenant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: TenantUpdateInput,
  })
  async updateTenant(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() data: TenantUpdateInput
  ): Promise<Tenant | null> {
    try {
      return await this.service.updateTenant({
        where: params,
        data: data,
        select: {
          businessType: true,
          contactNumber: true,
          contactPerson: true,
          createdAt: true,
          email: true,
          id: true,
          moveInDate: true,
          name: true,
          status: true,
          tenantId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Tenant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTenant(
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Tenant | null> {
    try {
      return await this.service.deleteTenant({
        where: params,
        select: {
          businessType: true,
          contactNumber: true,
          contactPerson: true,
          createdAt: true,
          email: true,
          id: true,
          moveInDate: true,
          name: true,
          status: true,
          tenantId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/contactLogs")
  @ApiNestedQuery(ContactLogFindManyArgs)
  async findContactLogs(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ContactLog[]> {
    const query = plainToClass(ContactLogFindManyArgs, request.query);
    const results = await this.service.findContactLogs(params.id, {
      ...query,
      select: {
        contactDate: true,
        contactMethod: true,
        contactReason: true,
        createdAt: true,
        id: true,
        logId: true,
        notes: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/contactLogs")
  async connectContactLogs(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ContactLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contactLogs: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/contactLogs")
  async updateContactLogs(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ContactLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contactLogs: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/contactLogs")
  async disconnectContactLogs(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ContactLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contactLogs: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/leaseAgreements")
  @ApiNestedQuery(LeaseAgreementFindManyArgs)
  async findLeaseAgreements(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<LeaseAgreement[]> {
    const query = plainToClass(LeaseAgreementFindManyArgs, request.query);
    const results = await this.service.findLeaseAgreements(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        leaseEndDate: true,
        leaseId: true,
        leaseStartDate: true,
        leaseTerms: true,
        monthlyRent: true,
        renewalOptions: true,
        securityDeposit: true,

        space: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        terminationClause: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/leaseAgreements")
  async connectLeaseAgreements(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: LeaseAgreementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaseAgreements: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/leaseAgreements")
  async updateLeaseAgreements(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: LeaseAgreementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaseAgreements: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/leaseAgreements")
  async disconnectLeaseAgreements(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: LeaseAgreementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaseAgreements: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/maintenanceRequests")
  @ApiNestedQuery(MaintenanceRequestFindManyArgs)
  async findMaintenanceRequests(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<MaintenanceRequest[]> {
    const query = plainToClass(MaintenanceRequestFindManyArgs, request.query);
    const results = await this.service.findMaintenanceRequests(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        issueDescription: true,
        requestDate: true,
        requestId: true,
        resolutionDate: true,

        space: {
          select: {
            id: true,
          },
        },

        status: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/maintenanceRequests")
  async connectMaintenanceRequests(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: MaintenanceRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceRequests: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/maintenanceRequests")
  async updateMaintenanceRequests(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: MaintenanceRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceRequests: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/maintenanceRequests")
  async disconnectMaintenanceRequests(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: MaintenanceRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceRequests: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/payments")
  @ApiNestedQuery(PaymentFindManyArgs)
  async findPayments(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Payment[]> {
    const query = plainToClass(PaymentFindManyArgs, request.query);
    const results = await this.service.findPayments(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        lease: true,
        paymentDate: true,
        paymentId: true,
        paymentMethod: true,
        paymentStatus: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payments")
  async connectPayments(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payments")
  async updatePayments(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payments")
  async disconnectPayments(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }
}
