/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ContactLog as PrismaContactLog,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class ContactLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContactLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.contactLog.count(args);
  }

  async contactLogs(
    args: Prisma.ContactLogFindManyArgs
  ): Promise<PrismaContactLog[]> {
    return this.prisma.contactLog.findMany(args);
  }
  async contactLog(
    args: Prisma.ContactLogFindUniqueArgs
  ): Promise<PrismaContactLog | null> {
    return this.prisma.contactLog.findUnique(args);
  }
  async createContactLog(
    args: Prisma.ContactLogCreateArgs
  ): Promise<PrismaContactLog> {
    return this.prisma.contactLog.create(args);
  }
  async updateContactLog(
    args: Prisma.ContactLogUpdateArgs
  ): Promise<PrismaContactLog> {
    return this.prisma.contactLog.update(args);
  }
  async deleteContactLog(
    args: Prisma.ContactLogDeleteArgs
  ): Promise<PrismaContactLog> {
    return this.prisma.contactLog.delete(args);
  }

  async getTenant(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.contactLog
      .findUnique({
        where: { id: parentId },
      })
      .tenant();
  }
}
