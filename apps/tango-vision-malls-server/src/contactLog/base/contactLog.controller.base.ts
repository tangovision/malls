/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContactLogService } from "../contactLog.service";
import { ContactLogCreateInput } from "./ContactLogCreateInput";
import { ContactLog } from "./ContactLog";
import { ContactLogFindManyArgs } from "./ContactLogFindManyArgs";
import { ContactLogWhereUniqueInput } from "./ContactLogWhereUniqueInput";
import { ContactLogUpdateInput } from "./ContactLogUpdateInput";

export class ContactLogControllerBase {
  constructor(protected readonly service: ContactLogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContactLog })
  @swagger.ApiBody({
    type: ContactLogCreateInput,
  })
  async createContactLog(
    @common.Body() data: ContactLogCreateInput
  ): Promise<ContactLog> {
    return await this.service.createContactLog({
      data: {
        ...data,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,
      },
      select: {
        contactDate: true,
        contactMethod: true,
        contactReason: true,
        createdAt: true,
        id: true,
        logId: true,
        notes: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContactLog] })
  @ApiNestedQuery(ContactLogFindManyArgs)
  async contactLogs(@common.Req() request: Request): Promise<ContactLog[]> {
    const args = plainToClass(ContactLogFindManyArgs, request.query);
    return this.service.contactLogs({
      ...args,
      select: {
        contactDate: true,
        contactMethod: true,
        contactReason: true,
        createdAt: true,
        id: true,
        logId: true,
        notes: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContactLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contactLog(
    @common.Param() params: ContactLogWhereUniqueInput
  ): Promise<ContactLog | null> {
    const result = await this.service.contactLog({
      where: params,
      select: {
        contactDate: true,
        contactMethod: true,
        contactReason: true,
        createdAt: true,
        id: true,
        logId: true,
        notes: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContactLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: ContactLogUpdateInput,
  })
  async updateContactLog(
    @common.Param() params: ContactLogWhereUniqueInput,
    @common.Body() data: ContactLogUpdateInput
  ): Promise<ContactLog | null> {
    try {
      return await this.service.updateContactLog({
        where: params,
        data: {
          ...data,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,
        },
        select: {
          contactDate: true,
          contactMethod: true,
          contactReason: true,
          createdAt: true,
          id: true,
          logId: true,
          notes: true,

          tenant: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContactLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContactLog(
    @common.Param() params: ContactLogWhereUniqueInput
  ): Promise<ContactLog | null> {
    try {
      return await this.service.deleteContactLog({
        where: params,
        select: {
          contactDate: true,
          contactMethod: true,
          contactReason: true,
          createdAt: true,
          id: true,
          logId: true,
          notes: true,

          tenant: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
