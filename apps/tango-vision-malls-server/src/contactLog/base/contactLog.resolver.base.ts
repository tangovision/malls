/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ContactLog } from "./ContactLog";
import { ContactLogCountArgs } from "./ContactLogCountArgs";
import { ContactLogFindManyArgs } from "./ContactLogFindManyArgs";
import { ContactLogFindUniqueArgs } from "./ContactLogFindUniqueArgs";
import { CreateContactLogArgs } from "./CreateContactLogArgs";
import { UpdateContactLogArgs } from "./UpdateContactLogArgs";
import { DeleteContactLogArgs } from "./DeleteContactLogArgs";
import { Tenant } from "../../tenant/base/Tenant";
import { ContactLogService } from "../contactLog.service";
@graphql.Resolver(() => ContactLog)
export class ContactLogResolverBase {
  constructor(protected readonly service: ContactLogService) {}

  async _contactLogsMeta(
    @graphql.Args() args: ContactLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContactLog])
  async contactLogs(
    @graphql.Args() args: ContactLogFindManyArgs
  ): Promise<ContactLog[]> {
    return this.service.contactLogs(args);
  }

  @graphql.Query(() => ContactLog, { nullable: true })
  async contactLog(
    @graphql.Args() args: ContactLogFindUniqueArgs
  ): Promise<ContactLog | null> {
    const result = await this.service.contactLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContactLog)
  async createContactLog(
    @graphql.Args() args: CreateContactLogArgs
  ): Promise<ContactLog> {
    return await this.service.createContactLog({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ContactLog)
  async updateContactLog(
    @graphql.Args() args: UpdateContactLogArgs
  ): Promise<ContactLog | null> {
    try {
      return await this.service.updateContactLog({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContactLog)
  async deleteContactLog(
    @graphql.Args() args: DeleteContactLogArgs
  ): Promise<ContactLog | null> {
    try {
      return await this.service.deleteContactLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  async getTenant(
    @graphql.Parent() parent: ContactLog
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
