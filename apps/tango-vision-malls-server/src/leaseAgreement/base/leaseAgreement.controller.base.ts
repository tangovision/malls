/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LeaseAgreementService } from "../leaseAgreement.service";
import { LeaseAgreementCreateInput } from "./LeaseAgreementCreateInput";
import { LeaseAgreement } from "./LeaseAgreement";
import { LeaseAgreementFindManyArgs } from "./LeaseAgreementFindManyArgs";
import { LeaseAgreementWhereUniqueInput } from "./LeaseAgreementWhereUniqueInput";
import { LeaseAgreementUpdateInput } from "./LeaseAgreementUpdateInput";

export class LeaseAgreementControllerBase {
  constructor(protected readonly service: LeaseAgreementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LeaseAgreement })
  @swagger.ApiBody({
    type: LeaseAgreementCreateInput,
  })
  async createLeaseAgreement(
    @common.Body() data: LeaseAgreementCreateInput
  ): Promise<LeaseAgreement> {
    return await this.service.createLeaseAgreement({
      data: {
        ...data,

        space: data.space
          ? {
              connect: data.space,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        leaseEndDate: true,
        leaseId: true,
        leaseStartDate: true,
        leaseTerms: true,
        monthlyRent: true,
        renewalOptions: true,
        securityDeposit: true,

        space: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        terminationClause: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LeaseAgreement] })
  @ApiNestedQuery(LeaseAgreementFindManyArgs)
  async leaseAgreements(
    @common.Req() request: Request
  ): Promise<LeaseAgreement[]> {
    const args = plainToClass(LeaseAgreementFindManyArgs, request.query);
    return this.service.leaseAgreements({
      ...args,
      select: {
        createdAt: true,
        id: true,
        leaseEndDate: true,
        leaseId: true,
        leaseStartDate: true,
        leaseTerms: true,
        monthlyRent: true,
        renewalOptions: true,
        securityDeposit: true,

        space: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        terminationClause: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LeaseAgreement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async leaseAgreement(
    @common.Param() params: LeaseAgreementWhereUniqueInput
  ): Promise<LeaseAgreement | null> {
    const result = await this.service.leaseAgreement({
      where: params,
      select: {
        createdAt: true,
        id: true,
        leaseEndDate: true,
        leaseId: true,
        leaseStartDate: true,
        leaseTerms: true,
        monthlyRent: true,
        renewalOptions: true,
        securityDeposit: true,

        space: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        terminationClause: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LeaseAgreement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: LeaseAgreementUpdateInput,
  })
  async updateLeaseAgreement(
    @common.Param() params: LeaseAgreementWhereUniqueInput,
    @common.Body() data: LeaseAgreementUpdateInput
  ): Promise<LeaseAgreement | null> {
    try {
      return await this.service.updateLeaseAgreement({
        where: params,
        data: {
          ...data,

          space: data.space
            ? {
                connect: data.space,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          leaseEndDate: true,
          leaseId: true,
          leaseStartDate: true,
          leaseTerms: true,
          monthlyRent: true,
          renewalOptions: true,
          securityDeposit: true,

          space: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          terminationClause: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LeaseAgreement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLeaseAgreement(
    @common.Param() params: LeaseAgreementWhereUniqueInput
  ): Promise<LeaseAgreement | null> {
    try {
      return await this.service.deleteLeaseAgreement({
        where: params,
        select: {
          createdAt: true,
          id: true,
          leaseEndDate: true,
          leaseId: true,
          leaseStartDate: true,
          leaseTerms: true,
          monthlyRent: true,
          renewalOptions: true,
          securityDeposit: true,

          space: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },

          terminationClause: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
