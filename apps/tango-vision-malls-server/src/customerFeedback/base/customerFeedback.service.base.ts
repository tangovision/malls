/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CustomerFeedback as PrismaCustomerFeedback,
} from "@prisma/client";

export class CustomerFeedbackServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerFeedbackCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerFeedback.count(args);
  }

  async customerFeedbacks(
    args: Prisma.CustomerFeedbackFindManyArgs
  ): Promise<PrismaCustomerFeedback[]> {
    return this.prisma.customerFeedback.findMany(args);
  }
  async customerFeedback(
    args: Prisma.CustomerFeedbackFindUniqueArgs
  ): Promise<PrismaCustomerFeedback | null> {
    return this.prisma.customerFeedback.findUnique(args);
  }
  async createCustomerFeedback(
    args: Prisma.CustomerFeedbackCreateArgs
  ): Promise<PrismaCustomerFeedback> {
    return this.prisma.customerFeedback.create(args);
  }
  async updateCustomerFeedback(
    args: Prisma.CustomerFeedbackUpdateArgs
  ): Promise<PrismaCustomerFeedback> {
    return this.prisma.customerFeedback.update(args);
  }
  async deleteCustomerFeedback(
    args: Prisma.CustomerFeedbackDeleteArgs
  ): Promise<PrismaCustomerFeedback> {
    return this.prisma.customerFeedback.delete(args);
  }
}
