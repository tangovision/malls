/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomerFeedbackService } from "../customerFeedback.service";
import { CustomerFeedbackCreateInput } from "./CustomerFeedbackCreateInput";
import { CustomerFeedback } from "./CustomerFeedback";
import { CustomerFeedbackFindManyArgs } from "./CustomerFeedbackFindManyArgs";
import { CustomerFeedbackWhereUniqueInput } from "./CustomerFeedbackWhereUniqueInput";
import { CustomerFeedbackUpdateInput } from "./CustomerFeedbackUpdateInput";

export class CustomerFeedbackControllerBase {
  constructor(protected readonly service: CustomerFeedbackService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomerFeedback })
  @swagger.ApiBody({
    type: CustomerFeedbackCreateInput,
  })
  async createCustomerFeedback(
    @common.Body() data: CustomerFeedbackCreateInput
  ): Promise<CustomerFeedback> {
    return await this.service.createCustomerFeedback({
      data: data,
      select: {
        comments: true,
        createdAt: true,
        date: true,
        id: true,
        rating: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomerFeedback] })
  @ApiNestedQuery(CustomerFeedbackFindManyArgs)
  async customerFeedbacks(
    @common.Req() request: Request
  ): Promise<CustomerFeedback[]> {
    const args = plainToClass(CustomerFeedbackFindManyArgs, request.query);
    return this.service.customerFeedbacks({
      ...args,
      select: {
        comments: true,
        createdAt: true,
        date: true,
        id: true,
        rating: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomerFeedback })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customerFeedback(
    @common.Param() params: CustomerFeedbackWhereUniqueInput
  ): Promise<CustomerFeedback | null> {
    const result = await this.service.customerFeedback({
      where: params,
      select: {
        comments: true,
        createdAt: true,
        date: true,
        id: true,
        rating: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomerFeedback })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: CustomerFeedbackUpdateInput,
  })
  async updateCustomerFeedback(
    @common.Param() params: CustomerFeedbackWhereUniqueInput,
    @common.Body() data: CustomerFeedbackUpdateInput
  ): Promise<CustomerFeedback | null> {
    try {
      return await this.service.updateCustomerFeedback({
        where: params,
        data: data,
        select: {
          comments: true,
          createdAt: true,
          date: true,
          id: true,
          rating: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomerFeedback })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomerFeedback(
    @common.Param() params: CustomerFeedbackWhereUniqueInput
  ): Promise<CustomerFeedback | null> {
    try {
      return await this.service.deleteCustomerFeedback({
        where: params,
        select: {
          comments: true,
          createdAt: true,
          date: true,
          id: true,
          rating: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
