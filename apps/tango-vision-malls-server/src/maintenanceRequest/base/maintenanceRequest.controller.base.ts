/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MaintenanceRequestService } from "../maintenanceRequest.service";
import { MaintenanceRequestCreateInput } from "./MaintenanceRequestCreateInput";
import { MaintenanceRequest } from "./MaintenanceRequest";
import { MaintenanceRequestFindManyArgs } from "./MaintenanceRequestFindManyArgs";
import { MaintenanceRequestWhereUniqueInput } from "./MaintenanceRequestWhereUniqueInput";
import { MaintenanceRequestUpdateInput } from "./MaintenanceRequestUpdateInput";

export class MaintenanceRequestControllerBase {
  constructor(protected readonly service: MaintenanceRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MaintenanceRequest })
  async createMaintenanceRequest(
    @common.Body() data: MaintenanceRequestCreateInput
  ): Promise<MaintenanceRequest> {
    return await this.service.createMaintenanceRequest({
      data: {
        ...data,

        space: data.space
          ? {
              connect: data.space,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        issueDescription: true,
        requestDate: true,
        requestId: true,
        resolutionDate: true,

        space: {
          select: {
            id: true,
          },
        },

        status: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MaintenanceRequest] })
  @ApiNestedQuery(MaintenanceRequestFindManyArgs)
  async maintenanceRequests(
    @common.Req() request: Request
  ): Promise<MaintenanceRequest[]> {
    const args = plainToClass(MaintenanceRequestFindManyArgs, request.query);
    return this.service.maintenanceRequests({
      ...args,
      select: {
        createdAt: true,
        id: true,
        issueDescription: true,
        requestDate: true,
        requestId: true,
        resolutionDate: true,

        space: {
          select: {
            id: true,
          },
        },

        status: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async maintenanceRequest(
    @common.Param() params: MaintenanceRequestWhereUniqueInput
  ): Promise<MaintenanceRequest | null> {
    const result = await this.service.maintenanceRequest({
      where: params,
      select: {
        createdAt: true,
        id: true,
        issueDescription: true,
        requestDate: true,
        requestId: true,
        resolutionDate: true,

        space: {
          select: {
            id: true,
          },
        },

        status: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMaintenanceRequest(
    @common.Param() params: MaintenanceRequestWhereUniqueInput,
    @common.Body() data: MaintenanceRequestUpdateInput
  ): Promise<MaintenanceRequest | null> {
    try {
      return await this.service.updateMaintenanceRequest({
        where: params,
        data: {
          ...data,

          space: data.space
            ? {
                connect: data.space,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          issueDescription: true,
          requestDate: true,
          requestId: true,
          resolutionDate: true,

          space: {
            select: {
              id: true,
            },
          },

          status: true,

          tenant: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMaintenanceRequest(
    @common.Param() params: MaintenanceRequestWhereUniqueInput
  ): Promise<MaintenanceRequest | null> {
    try {
      return await this.service.deleteMaintenanceRequest({
        where: params,
        select: {
          createdAt: true,
          id: true,
          issueDescription: true,
          requestDate: true,
          requestId: true,
          resolutionDate: true,

          space: {
            select: {
              id: true,
            },
          },

          status: true,

          tenant: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
