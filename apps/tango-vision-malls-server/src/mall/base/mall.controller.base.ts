/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MallService } from "../mall.service";
import { MallCreateInput } from "./MallCreateInput";
import { Mall } from "./Mall";
import { MallFindManyArgs } from "./MallFindManyArgs";
import { MallWhereUniqueInput } from "./MallWhereUniqueInput";
import { MallUpdateInput } from "./MallUpdateInput";

export class MallControllerBase {
  constructor(protected readonly service: MallService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Mall })
  async createMall(@common.Body() data: MallCreateInput): Promise<Mall> {
    return await this.service.createMall({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Mall] })
  @ApiNestedQuery(MallFindManyArgs)
  async malls(@common.Req() request: Request): Promise<Mall[]> {
    const args = plainToClass(MallFindManyArgs, request.query);
    return this.service.malls({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Mall })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mall(
    @common.Param() params: MallWhereUniqueInput
  ): Promise<Mall | null> {
    const result = await this.service.mall({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Mall })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMall(
    @common.Param() params: MallWhereUniqueInput,
    @common.Body() data: MallUpdateInput
  ): Promise<Mall | null> {
    try {
      return await this.service.updateMall({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Mall })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMall(
    @common.Param() params: MallWhereUniqueInput
  ): Promise<Mall | null> {
    try {
      return await this.service.deleteMall({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
