/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ServiceLevelAgreement } from "./ServiceLevelAgreement";
import { ServiceLevelAgreementCountArgs } from "./ServiceLevelAgreementCountArgs";
import { ServiceLevelAgreementFindManyArgs } from "./ServiceLevelAgreementFindManyArgs";
import { ServiceLevelAgreementFindUniqueArgs } from "./ServiceLevelAgreementFindUniqueArgs";
import { CreateServiceLevelAgreementArgs } from "./CreateServiceLevelAgreementArgs";
import { UpdateServiceLevelAgreementArgs } from "./UpdateServiceLevelAgreementArgs";
import { DeleteServiceLevelAgreementArgs } from "./DeleteServiceLevelAgreementArgs";
import { ServiceLevelAgreementService } from "../serviceLevelAgreement.service";
@graphql.Resolver(() => ServiceLevelAgreement)
export class ServiceLevelAgreementResolverBase {
  constructor(protected readonly service: ServiceLevelAgreementService) {}

  async _serviceLevelAgreementsMeta(
    @graphql.Args() args: ServiceLevelAgreementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ServiceLevelAgreement])
  async serviceLevelAgreements(
    @graphql.Args() args: ServiceLevelAgreementFindManyArgs
  ): Promise<ServiceLevelAgreement[]> {
    return this.service.serviceLevelAgreements(args);
  }

  @graphql.Query(() => ServiceLevelAgreement, { nullable: true })
  async serviceLevelAgreement(
    @graphql.Args() args: ServiceLevelAgreementFindUniqueArgs
  ): Promise<ServiceLevelAgreement | null> {
    const result = await this.service.serviceLevelAgreement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ServiceLevelAgreement)
  async createServiceLevelAgreement(
    @graphql.Args() args: CreateServiceLevelAgreementArgs
  ): Promise<ServiceLevelAgreement> {
    return await this.service.createServiceLevelAgreement({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ServiceLevelAgreement)
  async updateServiceLevelAgreement(
    @graphql.Args() args: UpdateServiceLevelAgreementArgs
  ): Promise<ServiceLevelAgreement | null> {
    try {
      return await this.service.updateServiceLevelAgreement({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceLevelAgreement)
  async deleteServiceLevelAgreement(
    @graphql.Args() args: DeleteServiceLevelAgreementArgs
  ): Promise<ServiceLevelAgreement | null> {
    try {
      return await this.service.deleteServiceLevelAgreement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
