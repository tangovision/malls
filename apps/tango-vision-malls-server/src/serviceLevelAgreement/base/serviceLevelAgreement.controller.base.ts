/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServiceLevelAgreementService } from "../serviceLevelAgreement.service";
import { ServiceLevelAgreementCreateInput } from "./ServiceLevelAgreementCreateInput";
import { ServiceLevelAgreement } from "./ServiceLevelAgreement";
import { ServiceLevelAgreementFindManyArgs } from "./ServiceLevelAgreementFindManyArgs";
import { ServiceLevelAgreementWhereUniqueInput } from "./ServiceLevelAgreementWhereUniqueInput";
import { ServiceLevelAgreementUpdateInput } from "./ServiceLevelAgreementUpdateInput";

export class ServiceLevelAgreementControllerBase {
  constructor(protected readonly service: ServiceLevelAgreementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServiceLevelAgreement })
  @swagger.ApiBody({
    type: ServiceLevelAgreementCreateInput,
  })
  async createServiceLevelAgreement(
    @common.Body() data: ServiceLevelAgreementCreateInput
  ): Promise<ServiceLevelAgreement> {
    return await this.service.createServiceLevelAgreement({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        penalties: true,
        priority: true,
        resolutionTime: true,
        responseTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ServiceLevelAgreement] })
  @ApiNestedQuery(ServiceLevelAgreementFindManyArgs)
  async serviceLevelAgreements(
    @common.Req() request: Request
  ): Promise<ServiceLevelAgreement[]> {
    const args = plainToClass(ServiceLevelAgreementFindManyArgs, request.query);
    return this.service.serviceLevelAgreements({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        penalties: true,
        priority: true,
        resolutionTime: true,
        responseTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServiceLevelAgreement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async serviceLevelAgreement(
    @common.Param() params: ServiceLevelAgreementWhereUniqueInput
  ): Promise<ServiceLevelAgreement | null> {
    const result = await this.service.serviceLevelAgreement({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        penalties: true,
        priority: true,
        resolutionTime: true,
        responseTime: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServiceLevelAgreement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: ServiceLevelAgreementUpdateInput,
  })
  async updateServiceLevelAgreement(
    @common.Param() params: ServiceLevelAgreementWhereUniqueInput,
    @common.Body() data: ServiceLevelAgreementUpdateInput
  ): Promise<ServiceLevelAgreement | null> {
    try {
      return await this.service.updateServiceLevelAgreement({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          penalties: true,
          priority: true,
          resolutionTime: true,
          responseTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServiceLevelAgreement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServiceLevelAgreement(
    @common.Param() params: ServiceLevelAgreementWhereUniqueInput
  ): Promise<ServiceLevelAgreement | null> {
    try {
      return await this.service.deleteServiceLevelAgreement({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          penalties: true,
          priority: true,
          resolutionTime: true,
          responseTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
